@page "/todo"

@inject Radzen.DialogService DialogService

@inject IToDoRepository toDoRepository

@inject NavigationManager navManager

<PageTitle>ToDo List</PageTitle>

@if(appointments.Count >= 1)
{
    <MudButton StartIcon="@Icons.Material.Rounded.Delete" OnClick="@DeleteAll" Color="@Color.Error">
        Delete all
    </MudButton>
}

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="ToDo" Data=@appointments StartProperty="Start" EndProperty="End"
    TextProperty="Title" SelectedIndex="2"
    SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender
    AppointmentMove=@OnAppointmentMove >
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
</RadzenScheduler>

@code {
    RadzenScheduler<ToDo> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    List<ToDo> appointments = new();

    protected override async Task OnInitializedAsync()
    {
        var list = await toDoRepository.GetAll();
        appointments = list.ToList();

        //return base.OnInitializedAsync();
    }

    async Task DeleteAll()
    {
        await toDoRepository.DeleteAll();
        //Não esta funcionando
        //await scheduler.Reload();

        //Dando refresh na page
        await Task.Delay(1000);
        navManager.Refresh();
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {

        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }

        // // Highlight working hours (9-18)
        // if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        // {
        //     args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        // }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        //console.Log($"SlotSelect: Start={args.Start} End={args.End}");

        if (args.View.Text != "Year")
        {
            ToDo data = await DialogService.OpenAsync<AddAppointment>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                //appointments.Add(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                var list = await toDoRepository.GetAll();
                appointments = list.ToList();
                await scheduler.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<ToDo> args)
    {
        //console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

        var copy = new ToDo
        {
            Id = args.Data.Id,
            Start = args.Data.Start,
            End = args.Data.End,
            Title = args.Data.Title
        };

        var data = await DialogService.OpenAsync<EditAppointment>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });

        if (data != null)
        {
            // Update the appointment
            args.Data.Start = data.Start;
            args.Data.End = data.End;
            args.Data.Title = data.Title;
        }

        var list = await toDoRepository.GetAll();
        appointments = list.ToList();
        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<ToDo> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Title == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }

    async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs args)
    {
        var draggedAppointment = appointments.FirstOrDefault(x => x == args.Appointment.Data);

        if (draggedAppointment != null)
        {
            draggedAppointment.Start = draggedAppointment.Start + args.TimeSpan;

            draggedAppointment.End = draggedAppointment.End + args.TimeSpan;

            await scheduler.Reload();
        }
    }
}